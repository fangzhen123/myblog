之前都没怎么去认真研究过输入网址到网页呈现这个过程具体发生了什么，上网看了几篇博文，结合自己的理解，总结如下。

这个过程称为http请求过程，大致可以分为10步。

1.输入url,回车。

2.浏览器会检测该url本地是否有缓存。如果有缓存，则加载本地缓存，然后呈现。

3.本地无缓存，则进行DNS轮询。即获取该域名对应的ip地址。这个过程也存在缓存机制。缓存的顺序为：浏览器缓存->操作系统缓存->路由器缓存->DNS提供商缓存->DNS提供商轮询。
   详细过程如下：浏览器发请求给递归服务器（地方宽带运营商服务器），递归服务器发送请求给解析服务器。解析服务器将该域名设置的所有轮询主机服务器Ip
   返回给递归服务器，递归服务器将这些不同的ip返回给客户机。最后浏览器会随机对其中的一个ip进行访问。
   
4.找到IP后，进行TCP3次握手进行连接到上述服务器。

5.连接成功后，发送http请求。对应IP下的web服务器会读取http request的头部信息,例如是nginx服务器，会根据request头部信息中的host，来匹配自己的虚拟主机的配置文件的server_name,看看是否有匹配的。然后读取
  nginx中有对应的正则匹配，凡是url中匹配到.php，那么连同后面额参数一起，交给后端的fastcgi进行处理。处理完成后，fastcgi返回一个html文件，Nginx再把这个html文件返回给浏览器。
  
6.浏览器接收到http response

7.关闭TCP连接

8.检测状态码，对应不同的处理。

9.浏览器的呈现引擎发挥作用，呈现出来。
   具体如下：
        1).解析html转换成DOM树。浏览器有一个内置组件叫HTML解析器，会遍历HTML代码去生成DOM树。
        2).结合部分CSS样式将DOM树转换成呈现树（这里面的样式包括颜色尺码等）。这里有浏览器的另外一个内置组件叫CSS解析器会遍历所有的CSS内容行成一组样式规则。这里面的CSS解析器和上一步的HTML解析器是同时进行的，之后会将样式规则附加到DOM树上就形成了我们的呈现树。
        3).通过呈现树构建布局树，主要是为每一个DOM元素分配了一个应出现在屏幕上的确切坐标。
        4).遍历呈现树，绘制每一个节点。
   为了缩短整个呈现的流程，浏览器不会等到所有的DOM树和样式规则都准备好再进行显示。而是一边解析一边显示，如果后面有javascript改变了某一元素的样式属性就会导致重流（reflow）和重绘(repaint).
   
  至此，一次浏览器请求完成。
  
   主要参考博文：
   
        1.http://www.cnblogs.com/jesse2013/p/basicwebprocess.html
        2.http://www.linux178.com/web/httprequest.html/comment-page-1
