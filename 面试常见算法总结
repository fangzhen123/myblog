1.找出整数数组中唯一一个落单的数;
  思路:二进制异或运算,相同两数异或等于0,0异或任何数等于该数本身。
  js代码：
  /**
 * @param {number[]} nums
 * @return {number}
 */
var singleNumber = function(nums) {
    var i = 0,temp = 0;
    while(i<nums.length){
        temp ^= nums[i++];
    }
    return temp;
};


2.有N个数1到N-1,其中有一个数重复。O(n)限制，找出该数。（微信面试题）
  思路：N个数的和减去n-1个数的和。
  
3.求出二叉树的高度;
  思路：递归实现。若为根节点，则return 0; 否则 return 左右子树最大高度+1；
   c++代码：
   /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    int maxDepth(TreeNode* root) {
        if(root==NULL){
            return 0;
        }
        else{
            int leftDepth = maxDepth(root->left);
            int rightDepth = maxDepth(root->right);
            return leftDepth>rightDepth?leftDepth+1:rightDepth+1;
        }
    }
};

4.判断两棵二叉树是否相等
  思路：先判断根节点是否都为空，或者都不为空且值相等，再递归判断左右子树是否相等。
  c++代码：
  
  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==NULL&&q==NULL){
            return true;
        }
        if(p==NULL||q==NULL){
            return false;
        }
       
        if(p->val!=q->val){
            return false;
        }
        else{
            if(isSameTree(p->left,q->left)&&isSameTree(p->right,q->right)){
                    return true;
            }
            return false;
        }
    
    }
};

5.输出给点二叉树的先序遍历。
   思路：1.递归实现，
         2.迭代实现，利用栈来实现，首先根节点入栈，while循环，栈顶元素pop并记录下来，放入数组中。然后该指针的右指针，左指针依次入栈。
         
         非递归实现代码：
         /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<int> preorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> s;
        s.push(root);
        while(!s.empty()){
            TreeNode* t = s.top();
            s.pop();
            if(t!=NULL){
                result.push_back(t->val);
                s.push(t->right);
                s.push(t->left);
            }
            
        }
        return result;
    }
};


6.非递归实现输入给定二叉树的中序遍历
  思路：先将所有的左节点push进栈，再依次出栈，并将指针指向右节点。
  c++代码：
  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
     vector<int> inorderTraversal(TreeNode* root) {
        vector<int> result;
        stack<TreeNode*> s;
        TreeNode *p = root;
        while(p!=NULL||!s.empty()){
            if(p!=NULL){//先将左节点push进栈
                s.push(p);
                p=p->left;
            }
            else{
                p = s.top();
                s.pop();
                result.push_back(p->val);
                p=p->right;
            }
        }
        return result;
    }
};
  

7.判断单链表是否存在环。
  思路：使用两个指针，一个每次前进一位，一个每次前进2位。若存在环，则快的指针先进入环，两者必定相遇。
  c++代码：
  /**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    bool hasCycle(ListNode *head) {
        ListNode* a = head;
        ListNode* b = head;
        while(b!=NULL&&b->next!=NULL){
            a = a->next;
            b = b->next->next;
            if(a==b){
                return true;
            }
        }
        return false;
    }
};

8.O(1)时间删除单链表指定节点。
  思路：找到指定节点的下一节点，将下一节点的值赋值给指定节点，再将指定节点的next指向下一节点的next;
  c++代码：
  //O(1)时间删除链表节点，从无头单链表中删除节点
  void deleteRandomNode(Node *cur)
  {
      if(cur==NULL||cur->next==NULL){
          assert(1);
      }
      Node* curNext = cur->next;
      cur->val = curNext->val;
      cur->next = curNext->next;
      delete curNext;
  }
  
9.单链表的反转
  思路：非递归实现,依次反转每个节点指针指向
  Node* reverseList(Node *head){
      if(head==NULL||head->next==NULL)
          return head;
      Node *pre = null;
      Node *next= null;
      while(head!=NULL){
        next = head->next;
        head->next = pre;
        pre = head;
        head = next;
      }
      return pre;
  }
