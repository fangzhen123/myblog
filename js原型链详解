
1.javascript的数据类型
  js有5种数据类型，分别是number,string,null,undefined,bool.还有object。
  
  null和undefined的区别：
    
    undefined类型只有一个值undefined.变量已声明但是没有被初始化的时候，默认为undefined。
    
    null类型也只有一个值null.表示尚未存在的对象，常用来表示函数返回一个不存在的对象。
    
2.JavaScript中的==和===的区别。
  
  对于string,number等基础类型,==和===是有区别的。
  1).不同类型间的比较，==是将他们转化为同一类型后的值比较是否相等。===就严格点，如果类型不同就不相等。
  2).同类型比较的话，直接进行"值"比较，两者效果一样。
  
  对于array,object等高级类型，==和===没有区别，都是进行指针地址比较。
  
  基础类型和高级类型,是有区别的。
  1).对于==,将高级转化为基础类型,进行比较。
  2).两者类型不同,===结果为false。
  
3.原型对象
   javascript中,每定义一个对象，都会包含一些预定义的属性。函数对象的一个属性就是prototype,普通对象没有prototype,但是有_proto_属性。
   function f1(){};
   console.log(f1.prototype);//f1{}
   f1.prototype就是f1的一个实例对象，在f1创建的时候，创建了一个它的实例对象并赋值给它的prototype。
   凡是new Function()产生的对象都是函数对象，所以Function.prototype是一个函数对象。
   
   原型对象主要作用是用于继承。
   
   var person = function(name){
   this.name = name
  };
  person.prototype.getName = function(){
     return this.name; 
  }
  var a = new person('xiaomao');
  a.getName(); //xiaomao
  
  原型链的关系如下：
   a.__proto__ === person.prototype
   person.prototype.__proto__ === Object.prototype
   Object.prototype.__proto__ === null
   
疑点解释：
1.Object.__proto__ === Function.prototype // true
  Object是函数对象，是通过new Function()创建，所以Object.__proto__指向Function.prototype。

2.Function.__proto__ === Function.prototype // true
  Function 也是对象函数，也是通过new Function()创建，所以Function.__proto__指向Function.prototype。

自己是由自己创建的，好像不符合逻辑，但仔细想想，现实世界也有些类似，你是怎么来的，你妈生的，你妈怎么来的，
你姥姥生的，……类人猿进化来的，那类人猿从哪来，一直追溯下去……，就是无，（NULL生万物）
正如《道德经》里所说“无，名天地之始”。

3.Function.prototype.__proto__ === Object.prototype //true
其实这一点我也有点困惑，不过也可以试着解释一下。
Function.prototype是个函数对象，理论上他的__proto__应该指向 Function.prototype，就是他自己，自己指向自己，
没有意义。JS一直强调万物皆对象，函数对象也是对象，给他认个祖宗，指向Object.prototype
。Object.prototype.__proto__ === null，保证原型链能够正常结束。


总结
1.原型和原型链是JS实现继承的一种模型。
2.原型链的形成是真正是靠__proto__ 而非prototype

 
