1.简单选择算法的实现
  思想：通过n-i次关键字的比较，从n-i+1个记录中选择最小的关键字和第i个关键字互换。
#include <iostream>
using namespace std;

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
void swap(int *a,int *b){
	int temp = *a;
	*a = *b;
	*b = temp;
}
void selectSort(int arr[],int num){
	
	for(int i=0;i<num;i++){
		int minIndex = i; //记录最元素的下标
		for(int j=i+1;j<num;j++){
			if(arr[minIndex]>arr[j]){//若小于最小元素，则将该元素下标记录为最小元素下标
				minIndex = j;
			}
		}
		swap(&arr[minIndex],&arr[i]);//循环一个后，将最小元素和第i个元素互换
	}
}
int main() {
	int arr[5]={1,3,2,6,4};
	selectSort(arr,5);
	for(int i=0;i<5;i++){
		cout<<arr[i]<<" ";
	}
	return 0;
}


2.冒泡算法的实现
  思想：两两比较相邻的关键字，如果反序则互换。
  //冒泡排序
void maopaoSort(int arr[],int num){
	
	for(int i=num-1;i>=0;i--)
		
		for(int j=0;j<i;j++){
			if(arr[j]<arr[j+1]){
				swap(&arr[j],&arr[j+1]);
			}
		}
} 

3.直接插入排序
   思想：将一个记录插入已经排好序的有序表中，从而得到一个新的，记录数加1的有序表
   //插入排序
void insertSort(int arr[],int num){
	int i,j,temp;
	for(i=1;i<num;i++){
		temp = arr[i];
		for(j=i;j>0&&arr[j-1]>temp;j--){
			arr[j] = arr[j-1];
		}
		arr[j] = temp;
	}
}

4.堆排序
   思想：将待排序的序列构造成一个大顶堆，将堆顶的元素移走（与堆数组的末尾元素交换），再将剩余的n-1个序列重新构造成大顶堆。反复进行。
   
5.希尔排序
   思想：先将待排元素序列分割成若干个子序列(间隔某个增量)，分别进行直接插入排序，依次缩减增量再进行排序。待增量足够小时，再对全体元素进行直接插入排序（增量为1）。
   
6.归并排序
   思想：假设初始序列含有n个记录,则可以看成n个有序的子序列,每个子序列的长度为1,然后两两归并,得到(不小于n/2的最小整数)个长度为2
或1的有序子序列,再两两归并,...如此重复,直至得到一个长度为n的有序序列为止,这种排序方法称为2路归并排序。
